{"version":3,"file":"coupons_report.min.js","sources":["../src/coupons_report.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Handle coupons report bulk actions.\n *\n * @module     enrol_wallet/coupons_report\n * @copyright  2025 Mohammad Farouk <phun.for.physics@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport * as reportSelectors from 'core_reportbuilder/local/selectors';\nimport * as tableEvents from 'core_table/local/dynamic/events';\nimport * as FormChangeChecker from 'core_form/changechecker';\nimport * as CustomEvents from 'core/custom_interaction_events';\nimport $ from 'jquery';\n\nconst Selectors = {\n    bulkDeleteForm: 'form#enrolwallet_coupondelete',\n    couponsReportWrapper: '[data-region=\"coupons-table-report-wrapper\"]',\n    checkbox: 'input[type=\"checkbox\"][data-togglegroup=\"report-select-all\"][data-toggle=\"slave\"]',\n    masterCheckbox: 'input[type=\"checkbox\"][data-togglegroup=\"report-select-all\"][data-toggle=\"master\"]',\n    checkedRows: '[data-togglegroup=\"report-select-all\"][data-toggle=\"slave\"]:checked',\n};\n\nexport const init = () => {\n    let deleteForm = $(Selectors.bulkDeleteForm);\n    let reportRegion = deleteForm.closest(Selectors.couponsReportWrapper).find(reportSelectors.regions.report);\n    if (deleteForm.length < 1 || reportRegion.length < 1) {\n        return;\n    }\n\n    let deleteButton = deleteForm.find('button[name=\"delete\"]');\n    CustomEvents.define(deleteButton, [CustomEvents.events.accessibleChange]);\n\n    deleteButton.on(CustomEvents.events.accessibleChange + ', click', function() {\n        const e = new Event('submit', {cancelable: true});\n        deleteForm[0].dispatchEvent(e);\n        if (!e.defaultPrevented) {\n            FormChangeChecker.markFormSubmitted(deleteForm[0]);\n            deleteForm.trigger('submit');\n        }\n    });\n\n    // Every time the checkboxes in the report are changed, update the list of coupons id in the form values.\n    const updateIds = () => {\n        const selectedCoupons = [...reportRegion.find(Selectors.checkedRows)];\n        const selectedCouponsIds = selectedCoupons.map(check => parseInt(check.value));\n        deleteForm.find('[name=\"ids\"]').val(selectedCouponsIds.join(','));\n\n        // Disable the action selector if nothing selected, and reset the current selection.\n        deleteButton.attr('disabled', selectedCoupons.length === 0);\n    };\n\n    updateIds();\n\n    document.addEventListener('change', event => {\n        // When checkboxes are checked next to individual users or the master toggle (Select all/none).\n        if ((event.target.matches(Selectors.checkbox) || event.target.matches(Selectors.masterCheckbox))\n                && reportRegion.find(event.target).length !== 0) {\n            updateIds();\n        }\n    });\n\n    document.addEventListener(tableEvents.tableContentRefreshed, event => {\n        // When the report contents is updated (i.e. page is changed, filters applied, etc).\n        if (reportRegion.find(event.target).length !== 0) {\n            updateIds();\n        }\n    });\n};"],"names":["Selectors","deleteForm","reportRegion","closest","find","reportSelectors","regions","report","length","deleteButton","CustomEvents","define","events","accessibleChange","on","e","Event","cancelable","dispatchEvent","defaultPrevented","FormChangeChecker","markFormSubmitted","trigger","updateIds","selectedCoupons","selectedCouponsIds","map","check","parseInt","value","val","join","attr","document","addEventListener","event","target","matches","tableEvents","tableContentRefreshed"],"mappings":";;;;;;;0WA4BMA,yBACc,gCADdA,+BAEoB,+CAFpBA,mBAGQ,oFAHRA,yBAIc,qFAJdA,sBAKW,oFAGG,SACZC,YAAa,mBAAED,0BACfE,aAAeD,WAAWE,QAAQH,gCAAgCI,KAAKC,gBAAgBC,QAAQC,WAC/FN,WAAWO,OAAS,GAAKN,aAAaM,OAAS,aAI/CC,aAAeR,WAAWG,KAAK,yBACnCM,aAAaC,OAAOF,aAAc,CAACC,aAAaE,OAAOC,mBAEvDJ,aAAaK,GAAGJ,aAAaE,OAAOC,iBAAmB,WAAW,iBACxDE,EAAI,IAAIC,MAAM,SAAU,CAACC,YAAY,IAC3ChB,WAAW,GAAGiB,cAAcH,GACvBA,EAAEI,mBACHC,kBAAkBC,kBAAkBpB,WAAW,IAC/CA,WAAWqB,QAAQ,oBAKrBC,UAAY,WACRC,gBAAkB,IAAItB,aAAaE,KAAKJ,wBACxCyB,mBAAqBD,gBAAgBE,KAAIC,OAASC,SAASD,MAAME,SACvE5B,WAAWG,KAAK,gBAAgB0B,IAAIL,mBAAmBM,KAAK,MAG5DtB,aAAauB,KAAK,WAAuC,IAA3BR,gBAAgBhB,SAGlDe,YAEAU,SAASC,iBAAiB,UAAUC,SAE3BA,MAAMC,OAAOC,QAAQrC,qBAAuBmC,MAAMC,OAAOC,QAAQrC,4BAChB,IAA3CE,aAAaE,KAAK+B,MAAMC,QAAQ5B,QACvCe,eAIRU,SAASC,iBAAiBI,YAAYC,uBAAuBJ,QAEV,IAA3CjC,aAAaE,KAAK+B,MAAMC,QAAQ5B,QAChCe"}